{"version":3,"sources":["../../src/controllers/runCommand.js"],"names":["spawns","context","console","log","JSON","stringify","query","cwd","body","code","message","childProcess","require","command","result","spawnObj","spawn","encoding","stdout","on","chunk","toString","stderr","stdin","pause","pid"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAIA,MAAM,GAAG,EAAb;;AAEe,kBAASC,OAAT,EAAkB;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,OAAO,CAACK,KAAvB,CAAZ;AACA,QAAMC,GAAG,GAAGN,OAAO,CAACK,KAAR,CAAcC,GAA1B;;AAEA,MAAI,CAACA,GAAL,EAAU;AACNN,IAAAA,OAAO,CAACO,IAAR,GAAe;AACXC,MAAAA,IAAI,EAAE,CAAC,CADI;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAf;AAIH;;AAED,QAAMC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AAEA,MAAIX,OAAO,CAACK,KAAR,CAAcO,OAAd,KAA0B,MAA9B,EAAsC;AAClC,yBAAS,YAAWN,GAAI,IAAxB;AACA,yBAAS,IAAT;;AACA,QAAIP,MAAM,CAACO,GAAD,CAAV,EAAiB;AACb,6BAAKP,MAAM,CAACO,GAAD,CAAX,EAAkB,MAAM;AACpB,6BAAS,8BAAT;AACH,OAFD;AAGA,aAAOP,MAAM,CAACO,GAAD,CAAb;AACH,KALD,MAKO;AACH,2BAAS,2BAAT;AACH;;AACDN,IAAAA,OAAO,CAACO,IAAR,GAAe;AACXC,MAAAA,IAAI,EAAE,CADK;AAEXK,MAAAA,MAAM,EAAE;AAFG,KAAf;AAIA;AACH;;AAED,QAAMC,QAAQ,GAAGJ,YAAY,CAACK,KAAb,CAAoB,KAApB,EAA0B,CAACf,OAAO,CAACK,KAAR,CAAcO,OAAf,CAA1B,EAAmD;AAACN,IAAAA,GAAD;AAAMU,IAAAA,QAAQ,EAAE;AAAhB,GAAnD,CAAjB;AACAF,EAAAA,QAAQ,CAACG,MAAT,CAAgBC,EAAhB,CAAmB,MAAnB,EAA2B,UAASC,KAAT,EAAgB;AACvC,yBAAQA,KAAK,CAACC,QAAN,EAAR;AACH,GAFD;AAGAN,EAAAA,QAAQ,CAACO,MAAT,CAAgBH,EAAhB,CAAmB,MAAnB,EAA4BC,KAAD,IAAW;AAClC,yBAAQA,KAAK,CAACC,QAAN,EAAR;AACH,GAFD;AAGAN,EAAAA,QAAQ,CAACI,EAAT,CAAY,OAAZ,EAAqB,UAASV,IAAT,EAAe;AAChC,SAAKc,KAAL,CAAWC,KAAX;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBM,IAA9B;AACH,GAHD;AAIAM,EAAAA,QAAQ,CAACI,EAAT,CAAY,MAAZ,EAAqBV,IAAD,IAAU,CAE7B,CAFD;AAGAT,EAAAA,MAAM,CAACO,GAAD,CAAN,GAAcQ,QAAQ,CAACU,GAAvB;AAEAxB,EAAAA,OAAO,CAACO,IAAR,GAAe;AACXC,IAAAA,IAAI,EAAE,CADK;AAEXK,IAAAA,MAAM,EAAE;AAFG,GAAf;AAIH;;AAAA","sourcesContent":["import { sendLog } from '../socket';\nimport kill from 'tree-kill';\n\nlet spawns = {};\n\nexport default function(context) {\n    console.log(JSON.stringify(context.query));\n    const cwd = context.query.cwd;\n\n    if (!cwd) {\n        context.body = {\n            code: -1,\n            message: '请选择项目'\n        };\n    }\n\n    const childProcess = require('child_process');\n\n    if (context.query.command === 'stop') {\n        sendLog(`stopping ${cwd}\\n`);\n        sendLog(`\\n`);\n        if (spawns[cwd]) {\n            kill(spawns[cwd], () => {\n                sendLog(`stopped, thanks for use!!!\\n`);\n            });\n            delete spawns[cwd];\n        } else {\n            sendLog(`no work need to stop!!!\\n`);\n        }\n        context.body = {\n            code: 0,\n            result: 'success'\n        };\n        return;\n    }\n\n    const spawnObj = childProcess.spawn(`npm`, [context.query.command], {cwd, encoding: 'utf-8'});\n    spawnObj.stdout.on('data', function(chunk) {\n        sendLog(chunk.toString());\n    });\n    spawnObj.stderr.on('data', (chunk) => {\n        sendLog(chunk.toString());\n    });\n    spawnObj.on('close', function(code) {\n        this.stdin.pause();\n        console.log('close code : ' + code);\n    });\n    spawnObj.on('exit', (code) => {\n        // sendLog(`stop ${cwd}`);\n    });\n    spawns[cwd] = spawnObj.pid;\n\n    context.body = {\n        code: 0,\n        result: 'success'\n    };\n};\n"],"file":"runCommand.js"}