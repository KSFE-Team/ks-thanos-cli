{"version":3,"sources":["../src/index.js"],"names":["port","app","Koa","server","process","on","err","logger","error","use","origin","allowMethods","allowHeaders","context","next","info","method","href","headers","token","stack","status","body","errcode","code","message","result","jsonLimit","enableTypes","router","routes","allowedMethods","undefined","other","set","JSON","stringify","databaseConfig","then","startServer","catch","listen"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,IAAI,GAAG,IAAb;AACA,MAAMC,GAAG,GAAG,IAAIC,YAAJ,EAAZ;AACA,MAAMC,MAAM,GAAG,0BAAaF,GAAb,CAAf;AAEAG,OAAO,CAACC,EAAR,CAAW,oBAAX,EAAkCC,GAAD,IAAS;AACtCC,kBAAOC,KAAP,CAAaF,GAAb;AACH,CAFD;AAIAL,GAAG,CAACQ,GAAJ,CAAQ,uBAAK;AACTC,EAAAA,MAAM,EAAE,GADC;AAETC,EAAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,KAA1B,EAAiC,SAAjC,CAFL;AAGTC,EAAAA,YAAY,EAAE,CAAC,cAAD,EAAiB,eAAjB,EAAkC,QAAlC,EAA4C,OAA5C,EAAqD,kBAArD;AAHL,CAAL,CAAR;AAKAX,GAAG,CAACQ,GAAJ,CAAQ,CAACI,OAAD,EAAUC,IAAV,KAAmB;AACvBP,kBAAOQ,IAAP,CAAa,GAAEF,OAAO,CAACG,MAAO,IAAGH,OAAO,CAACI,IAAK,IAAGJ,OAAO,CAACK,OAAR,CAAgB,cAAhB,CAAgC,IAAGL,OAAO,CAACK,OAAR,CAAgB,YAAhB,CAA8B,IAAGL,OAAO,CAACK,OAAR,CAAgBC,KAAhB,IAAyB,EAAG,EAAjJ;;AACA,SAAOL,IAAI,EAAX;AACH,CAHD;AAIAb,GAAG,CAACQ,GAAJ,CAAQ,OAAMI,OAAN,EAAeC,IAAf,KAAwB;AAC5B,MAAI;AACA,UAAMA,IAAI,EAAV;AACH,GAFD,CAEE,OAAON,KAAP,EAAc;AAEZD,oBAAOC,KAAP,CAAc,GAAEA,KAAK,CAACY,KAAM,EAA5B;;AACAP,IAAAA,OAAO,CAACQ,MAAR,GAAiB,GAAjB;AACAR,IAAAA,OAAO,CAACS,IAAR,GAAe;AACXC,MAAAA,OAAO,EAAEf,KAAK,CAACgB,IAAN,IAAc,CAAC,CADb;AAEXC,MAAAA,OAAO,EAAEjB,KAAK,CAACiB,OAFJ;AAGXC,MAAAA,MAAM,EAAE;AAHG,KAAf;AAMH;AACJ,CAdD;AAiBAzB,GAAG,CAACQ,GAAJ,CAAQ,4BAAW;AACfkB,EAAAA,SAAS,EAAE,MADI;AAEfC,EAAAA,WAAW,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,WAAjB;AAFE,CAAX,CAAR;AAMA3B,GAAG,CAACQ,GAAJ,CAAQoB,iBAAOC,MAAP,EAAR;AACA7B,GAAG,CAACQ,GAAJ,CAAQoB,iBAAOE,cAAP,EAAR;AAGA9B,GAAG,CAACQ,GAAJ,CAAQ,CAACI,OAAD,EAAUC,IAAV,KAAmB;AACvB,MAAID,OAAO,CAACS,IAAZ,EAAkB;AACd,QAAIT,OAAO,CAACS,IAAR,CAAaC,OAAb,KAAyBS,SAA7B,EAAwC;AACpC,UAAI;AAACP,QAAAA,OAAD;AAAU,WAAGQ;AAAb,UAAsBpB,OAAO,CAACS,IAAlC;AACAT,MAAAA,OAAO,CAACS,IAAR,GAAe;AACXC,QAAAA,OAAO,EAAE,CADE;AAEXG,QAAAA,MAAM,EAAEO;AAFG,OAAf;AAIAR,MAAAA,OAAO,KAAKZ,OAAO,CAACS,IAAR,CAAaG,OAAb,GAAuBA,OAA5B,CAAP;AACH;;AAEDZ,IAAAA,OAAO,CAACqB,GAAR,CAAY,cAAZ,EAA4B,kBAA5B;AACArB,IAAAA,OAAO,CAACS,IAAR,GAAea,IAAI,CAACC,SAAL,CAAevB,OAAO,CAACS,IAAvB,CAAf;AACH;;AACD,SAAOR,IAAI,EAAX;AACH,CAfD;AAkBA,0BAAauB,eAAb,EACKC,IADL,CACUC,WADV,EAEKC,KAFL,CAEYlC,GAAD,IAAS;AACZC,kBAAOC,KAAP,CAAaF,GAAb;AACH,CAJL;;AAMA,SAASiC,WAAT,GAAuB;AACnBpC,EAAAA,MAAM,CAACsC,MAAP,CAAczC,IAAd,EAAoB,MAAM;AACtBO,oBAAOQ,IAAP,CAAa,uBAAsBf,IAAK,KAAxC;AACH,GAFD;AAGH","sourcesContent":["import Koa from 'koa';\nimport router from './routers';\nimport { initDatabase } from './models';\nimport bodyParser from 'koa-bodyparser';\nimport databaseConfig from './models/config';\nimport cors from 'koa2-cors';\nimport logger from './utils/logger';\nimport { createSocket } from './socket';\n\nconst port = 3000;\nconst app = new Koa();\nconst server = createSocket(app);\n\nprocess.on('unhandledRejection', (err) => {\n    logger.error(err);\n});\n\napp.use(cors({\n    origin: '*',\n    allowMethods: ['GET', 'POST', 'DELETE', 'PUT', 'OPTIONS'],\n    allowHeaders: ['Content-Type', 'Authorization', 'Accept', 'token', 'X-Requested-With']\n}));\napp.use((context, next) => {\n    logger.info(`${context.method} ${context.href} ${context.headers['content-type']} ${context.headers['user-agent']} ${context.headers.token || ''}`);\n    return next();\n});\napp.use(async(context, next) => {\n    try {\n        await next();\n    } catch (error) {\n        // 错误处理\n        logger.error(`${error.stack}`);\n        context.status = 200;\n        context.body = {\n            errcode: error.code || -1,\n            message: error.message,\n            result: {\n            }\n        };\n    }\n});\n\n// 解析 Request Body\napp.use(bodyParser({\n    jsonLimit: '50mb',\n    enableTypes: ['json', 'form', 'multipart']\n}));\n\n// 载入 router\napp.use(router.routes());\napp.use(router.allowedMethods());\n\n// 返回响应头 'Content-Type' 固定为 'application/json'\napp.use((context, next) => {\n    if (context.body) {\n        if (context.body.errcode === undefined) {\n            let {message, ...other} = context.body;\n            context.body = {\n                errcode: 0,\n                result: other,\n            };\n            message && (context.body.message = message);\n        }\n        // 返回数据为 json 格式\n        context.set('Content-Type', 'application/json');\n        context.body = JSON.stringify(context.body);\n    }\n    return next();\n});\n\n// 初始化数据库\ninitDatabase(databaseConfig)\n    .then(startServer)\n    .catch((err) => {\n        logger.error(err);\n    });\n\nfunction startServer() {\n    server.listen(port, () => {\n        logger.info(`server listening on ${port}...`);\n    });\n}\n"],"file":"index.js"}