{"version":3,"sources":["../../../src/utils/logger/transportMongoDB.js"],"names":["collectionName","TransportMongoDB","Transport","constructor","options","host","dbName","port","database","Database","initDatabase","log","info","callback","db","getDB","collection","insertOne","level","Symbol","for","message","timestamp","then","Function","catch","error","console"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,cAAc,GAAG,MAAvB;;AAEe,MAAMC,gBAAN,SAA+BC,kBAA/B,CAAyC;AACpDC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACtB;AACA,SAAKC,IAAL,GAAYD,OAAO,CAACC,IAApB;AACA,SAAKC,MAAL,GAAcF,OAAO,CAACE,MAAtB;AACA,SAAKC,IAAL,GAAYH,OAAO,CAACG,IAApB;AACA,SAAKC,QAAL,GAAgB,IAAIC,iBAAJ,CAAa;AACzBH,MAAAA,MAAM,EAAE,KAAKA,MADY;AAEzBD,MAAAA,IAAI,EAAE,KAAKA,IAFc;AAGzBE,MAAAA,IAAI,EAAE,KAAKA;AAHc,KAAb,CAAhB;AAKA,SAAKC,QAAL,CAAcE,YAAd;AACH;;AAODC,EAAAA,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAChB,UAAMC,EAAE,GAAG,KAAKN,QAAL,CAAcO,KAAd,EAAX;;AACA,QAAI,CAACD,EAAL,EAAS;AACL;AACH;;AACDA,IAAAA,EAAE,CAACE,UAAH,CAAchB,cAAd,EAA8BiB,SAA9B,CAAwC;AACpCC,MAAAA,KAAK,EAAEN,IAAI,CAACO,MAAM,CAACC,GAAP,CAAW,OAAX,CAAD,CADyB;AAEpCC,MAAAA,OAAO,EAAET,IAAI,CAACS,OAFsB;AAGpCC,MAAAA,SAAS,EAAEV,IAAI,CAACU;AAHoB,KAAxC,EAKKC,IALL,CAKU,MAAM;AACR,UAAIV,QAAQ,YAAYW,QAAxB,EAAkC;AAC9BX,QAAAA,QAAQ;AACX;AACJ,KATL,EAUKY,KAVL,CAUYC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH,KAZL;AAaH;;AArCmD","sourcesContent":["import {Transport} from 'winston';\nimport Database from '../../models/database';\n\nconst collectionName = 'logs';\n\nexport default class TransportMongoDB extends Transport {\n    constructor(options = {}) {\n        super();\n        this.host = options.host;\n        this.dbName = options.dbName;\n        this.port = options.port;\n        this.database = new Database({\n            dbName: this.dbName,\n            host: this.host,\n            port: this.port\n        });\n        this.database.initDatabase();\n    }\n\n    /**\n     * 每一次日志输出时调用的函数\n     * @param   {Object}    info        日志信息\n     * @param   {Function}  callback    回调函数\n     */\n    log(info, callback) {\n        const db = this.database.getDB();\n        if (!db) {\n            return;\n        }\n        db.collection(collectionName).insertOne({\n            level: info[Symbol.for('level')],\n            message: info.message,\n            timestamp: info.timestamp\n        })\n            .then(() => {\n                if (callback instanceof Function) {\n                    callback();\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n}\n"],"file":"transportMongoDB.js"}